apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  annotations:
    # validations.keda.sh/hpa-ownership: "true"
    # scaledobject.keda.sh/transfer-hpa-ownership: "true"
  name: flask-app-service-so
  namespace: default
spec:
  advanced:
    #  horizontalPodAutoscalerConfig:
    #    name: {name-of-hpa-resource}
    restoreToOriginalReplicaCount: true
    scalingModifiers: {}
  #    formula: prom_trigger * 2
  #    target: "2"
  cooldownPeriod: 300
  # fallback:
  #   behavior: static 
  #    failureThreshold: 3
  #    replicas: 2
  maxReplicaCount: 16
    #  idleReplicaCount: 1 
  minReplicaCount: 1
  pollingInterval: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flask-app
  triggers:
  - metadata:
      ignoreNullValues: "true"
      query: sum(rate(model_prediction_count_total{job="flask-app-service"}[15s]))
        #query: sum(rate(app_request_count_total{endpoint="/", method="GET"}[40s]))
        #query: sum(rate(model_prediction_count_total{prediction="0", service="flask-app-service"}[5s])) 
        #query: sum(rate(model_prediction_count_total{prediction="1", namespace="default", service="flask-app-service"}[2m])) 
        #query: sum(rate(app_request_latency_seconds_total{endpoint="/predict"}[2m]))
        #query: sum(rate(app_request_latency_seconds_count{endpoint="/predict"}[2m]))
        #query: sum(rate(app_request_count_total{endpoint="/predict", method="POST"}[2m]))
      serverAddress: http://98.80.13.12:9090/
      threshold: "100.50"
    metricType: Value  # Value or AverageValue Note: metricType will not work if you use fallback.
    name: prom_trigger
    type: prometheus

